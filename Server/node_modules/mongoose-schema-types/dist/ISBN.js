"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const ISBN_REGEX_ARR = [
    /^(?:ISBN(?:-10)?:? *)?((?=\d{1,5}([ -]?)\d{1,7}\2?\d{1,6}\2?\d)(?:\d\2*){9}[\dX])$/i,
    /^(?:ISBN(?:-13)?:? *)?(97(?:8|9)([ -]?)(?=\d{1,5}\2?\d{1,7}\2?\d{1,6}\2?\d)(?:\d\2*){9}\d)$/i,
];
const validate = (value) => {
    if (typeof value !== "string") {
        throw mongoose.SchemaType.CastError("ISBN", `Value is not string: ${value}`);
    }
    let valid = false;
    for (const regex of ISBN_REGEX_ARR) {
        if (regex.test(value)) {
            valid = true;
            break;
        }
    }
    if (!valid) {
        throw mongoose.SchemaType.CastError("ISBN", `Value is not a valid ISBN number: ${value}`);
    }
    return value;
};
class ISBN extends mongoose.SchemaType {
    constructor(key, options) {
        super(key, options, "ISBN");
    }
    cast(val) {
        validate(val);
        return val;
    }
}
ISBN.instance = "ISBN";
mongoose.Schema.Types.ISBN = ISBN;
exports.default = ISBN;
