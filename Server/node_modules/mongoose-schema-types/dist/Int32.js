"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const INT32_MAX = 0x7fffffff;
const INT32_MIN = -0x80000000;
const validate = (value) => {
    var _val = Number(value);
    if (isNaN(_val)) {
        throw new mongoose.SchemaType.CastError("Int32", `${value} is not a number"`);
    }
    _val = Math.round(_val);
    if (_val < INT32_MIN || _val > INT32_MAX) {
        throw new mongoose.SchemaType.CastError("Int32", `${value} is outside of the range of valid BSON int32s: ${INT32_MAX} - ${INT32_MIN}`);
    }
    return _val;
};
class Int32 extends mongoose.SchemaType {
    constructor(key, options) {
        super(key, options, "Int32");
    }
    cast(val) {
        return validate(val);
    }
}
Int32.instance = "Int32";
Int32.INT32_BSON_TYPE = 16;
Int32.INT32_MAX = INT32_MAX;
Int32.INT32_MIN = INT32_MIN;
Int32.prototype.$conditionalHandlers =
    mongoose.Schema.Types.Number.prototype.$conditionalHandlers;
mongoose.Schema.Types.Int32 = Int32;
exports.default = Int32;
