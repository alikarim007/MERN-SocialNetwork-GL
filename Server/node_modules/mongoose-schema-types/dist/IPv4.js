"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const IPV4_REGEX = /^(?:(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?)$/;
const validate = (value) => {
    if (typeof value !== "string") {
        throw mongoose.SchemaType.CastError("IPv4", `Value is not string: ${value}`);
    }
    if (!IPV4_REGEX.test(value)) {
        throw mongoose.SchemaType.CastError("IPv4", `Value is not a valid IPv4 address: ${value}`);
    }
    return value;
};
class IPv4 extends mongoose.SchemaType {
    constructor(key, options) {
        super(key, options, "IPv4");
    }
    cast(val) {
        validate(val);
        return val;
    }
}
IPv4.instance = "IPv4";
mongoose.Schema.Types.IPv4 = IPv4;
exports.default = IPv4;
