"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const POSTAL_CODE_REGEXES = [
    new RegExp(/^\d{5}([-]?\d{4})?$/),
    new RegExp(/^(GIR|[A-Z]\d[A-Z\d]??|[A-Z]{2}\d[A-Z\d]??)[ ]??(\d[A-Z]{2})$/),
    new RegExp(/\b((?:0[1-46-9]\d{3})|(?:[1-357-9]\d{4})|(?:[4][0-24-9]\d{3})|(?:[6][013-9]\d{3}))\b/),
    new RegExp(/^([ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ]) {0,1}(\d[ABCEGHJKLMNPRSTVWXYZ]\d)$/),
    new RegExp(/^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$/),
    new RegExp(/^(V-|I-)?[0-9]{5}$/),
    new RegExp(/^(0[289][0-9]{2})|([1345689][0-9]{3})|(2[0-8][0-9]{2})|(290[0-9])|(291[0-4])|(7[0-4][0-9]{2})|(7[8-9][0-9]{2})$/),
    new RegExp(/^[1-9][0-9]{3}\s?([a-zA-Z]{2})?$/),
    new RegExp(/^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$/),
    new RegExp(/^([D|d][K|k]( |-))?[1-9]{1}[0-9]{3}$/),
    new RegExp(/^(s-|S-){0,1}[0-9]{3}\s?[0-9]{2}$/),
    new RegExp(/^[1-9]{1}[0-9]{3}$/),
    new RegExp(/^\d{6}$/),
    new RegExp(/^\d{4}$/),
    new RegExp(/^\d{4}([\-]\d{3})?$/),
    new RegExp(/^\d{4}$/),
    new RegExp(/^\d{4}$/),
];
function _testPostalCode(postalCode) {
    let result = false;
    for (let i = 0; i < POSTAL_CODE_REGEXES.length; i++) {
        const regex = POSTAL_CODE_REGEXES[i];
        if (regex.test(postalCode)) {
            result = true;
            break;
        }
    }
    return result;
}
const validate = (value) => {
    if (typeof value !== "string") {
        throw mongoose.SchemaType.CastError("PostalCode", `Value is not string: ${value}`);
    }
    if (!_testPostalCode(value)) {
        throw mongoose.SchemaType.CastError("PostalCode", `Value is not a valid postal code: ${value}`);
    }
    return value;
};
class PostalCode extends mongoose.SchemaType {
    constructor(key, options) {
        super(key, options, "PostalCode");
    }
    cast(val) {
        validate(val);
        return val;
    }
}
PostalCode.instance = "PostalCode";
mongoose.Schema.Types.PostalCode = PostalCode;
exports.default = PostalCode;
